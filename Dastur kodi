{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Python dasturlash tilida Pollardning kenguru algoritmini amalga oshirish uchun, avvalo, kerakli kutubxonalarni import qilishimiz kerak:"
      ],
      "metadata": {
        "id": "J3oVD109z3D6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import math"
      ],
      "metadata": {
        "id": "jZiRuApwz93m"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Keyin, Pollardning kenguru algoritmini amalga oshirish uchun funksiya yaratamiz:"
      ],
      "metadata": {
        "id": "I1CGAgAy0CsY"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "HMr6FLkry93X"
      },
      "outputs": [],
      "source": [
        "\n",
        "def pollards_kangaroo(g, y, p, N):\n",
        "    # N - qadam soni\n",
        "    # [a, b] - m va n orasidagi diapazon\n",
        "\n",
        "    a = N // 2\n",
        "    b = N\n",
        "    x_T = 0\n",
        "    y_T = pow(g, b, p)\n",
        "\n",
        "    # \"Kenguru\" o'tkazmalarini yaratamiz\n",
        "    L = [pow(g, a + i, p) for i in range(N + 1)]\n",
        "\n",
        "    # \"Kenguru\" o'tkazmalarini yurgizamiz\n",
        "    for i in range(N):\n",
        "        x_T = (x_T + L[y_T % N]) % p\n",
        "        y_T = (y_T * pow(g, L[y_T % N], p)) % p\n",
        "\n",
        "    # \"Tortish\" o'tkazmalarini yurgizamiz\n",
        "    x = 0\n",
        "    for i in range(N):\n",
        "        if pow(g, x, p) == y_T:\n",
        "            return b + x\n",
        "        x = (x + L[pow(g, x, p) % N]) % p\n",
        "\n",
        "    # Agar topilmagan bo'lsa, qaytariladigan qiymat yo'q\n",
        "    return None"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Bu funksiya, kenguru algoritmini ishga tushiradi va agar diskret logarifm topilsa, uni qaytaradi. Agar topilmagan bo'lsa, None qiymatini qaytaradi.\n",
        "\n",
        "# Bu funksiya, g (asos), y (diskret logarifmni topish uchun son), p (modulus) va N (qadamlar soni) kiritish uchun argumentlar oladi. Bu funksiya, yuqoridagi algoritmda tavsiflangan tartibda ishlaydi. Avvalo, \"kenguru\" o'tkazmalarini yaratadi va yurgizadi, keyin \"tortish\" o'tkazmalarini yurgizadi.\n",
        "\n",
        "# Bu funksiya, diskret logarifmni topish uchun Pollardning kenguru algoritmini ishlatadi. Bu funksiya, keng tarqalgan va samarali usul bo'lib, bu algoritmda ayniqsa katta sonlar uchun tez hisoblash imkonini beradi. Python dasturlash tili, bu algoritmninng yozilishini va tushunilishini osonlashtiradi, shuning uchun u kriptografiya sohasida o'rganish uchun juda yaxshi vosita bo'ladi."
      ],
      "metadata": {
        "id": "OKI8q7cC0JaL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Bu funksiyani amaliyotda qo'llash uchun, avvalo, g, y, p va N parametrlariga qiymatlar beramiz. Misol uchun, biz g = 2, y = 10, p = 17 va N = 5 deb tasavvur qilaylik."
      ],
      "metadata": {
        "id": "wcd2oEXH0QMb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g = 2\n",
        "y = 10\n",
        "p = 17\n",
        "N = 5\n",
        "log = pollards_kangaroo(g, y, p, N)\n",
        "print(\"Diskret logarifm:\", log)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KW-NZWQEzbWX",
        "outputId": "98b80968-6ddc-40d8-dfed-4963dd5ff39c"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Diskret logarifm: None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Shu sozlamalar bilan, biz algoritmni chaqirishimiz mumkin:"
      ],
      "metadata": {
        "id": "iYoX1_6E0UCw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Python tilida Pollardning kenguru algoritmi yaratish jarayonini davom ettiraylik. Bu jarayonda, biz Python tilidagi funksiyalar, operatorlar va data turlarini qo'llab-quvvatlaymiz.\n",
        "\n",
        "## Avvalo, biz kenguru algoritmi uchun kerak bo'lgan boshqa funksiyalarni yaratamiz. Bu yerda, bizning birinchi funksiyamiz f(x) bo'ladi, bu funksiya x mod N ni hisoblaydi va natijani qaytaradi:"
      ],
      "metadata": {
        "id": "UcWkhGET0lib"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def f(x, N):\n",
        "    return 1 + (x % N)"
      ],
      "metadata": {
        "id": "tXFyeSB_0r1U"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Keyin, biz monte_carlo funksiyasini yaratamiz, bu funksiya kenguru algoritmini amalga oshiradi va diskret logarifmni qaytaradi:"
      ],
      "metadata": {
        "id": "q9DE8DJo0uT1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def monte_carlo(g, y, p, N, m):\n",
        "    xT = 0\n",
        "    yT = pow(g, m, p)\n",
        "    for i in range(m):\n",
        "        j = f(yT, N)\n",
        "        xT = (xT + j) % m\n",
        "        yT = (yT * pow(g, j, p)) % p\n",
        "    return xT, yT\n",
        "\n"
      ],
      "metadata": {
        "id": "UmTphEb0zqun"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Bu funksiyada, pow funksiyasi moduliy ko'paytirish amalini bajaradi. Biz pow(g, m, p) bilan g ning m-darajasini p moduliga chiqaramiz.\n",
        "\n",
        "# Bu funksiyani chaqirish uchun, g, y, p, N, va m parametrlariga qiymat berishingiz kerak:"
      ],
      "metadata": {
        "id": "AJddtiW100CK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g = 2\n",
        "y = 10\n",
        "p = 17\n",
        "N = 5\n",
        "m = 10  # m parametri uchun bir qiymat tanlash\n",
        "\n",
        "xT, yT = monte_carlo(g, y, p, N, m)\n",
        "print(\"xT:\", xT)\n",
        "print(\"yT:\", yT)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AUKGRRDg04Zm",
        "outputId": "2036ab77-e901-4c66-b6c3-5f2ff77a1d3a"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "xT: 2\n",
            "yT: 16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Asosiy holat\n",
        "g = 2\n",
        "y = 10\n",
        "p = 17\n",
        "N = 5\n",
        "m = 10\n",
        "xT, yT = monte_carlo(g, y, p, N, m)\n",
        "print(\"Asosiy holat:\")\n",
        "print(\"xT:\", xT)\n",
        "print(\"yT:\", yT)\n",
        "\n",
        "# Qiyinchilik darajasi yuqori bo'lgan holat\n",
        "g = 2\n",
        "y = 100000\n",
        "p = 1000000007\n",
        "N = 50000\n",
        "m = 100000\n",
        "xT, yT = monte_carlo(g, y, p, N, m)\n",
        "print(\"Qiyinchilik darajasi yuqori bo'lgan holat:\")\n",
        "print(\"xT:\", xT)\n",
        "print(\"yT:\", yT)\n",
        "\n",
        "# Noaniq holat\n",
        "g = -2\n",
        "y = -10\n",
        "p = -17\n",
        "N = -5\n",
        "m = -10\n",
        "try:\n",
        "    xT, yT = monte_carlo(g, y, p,N, m)\n",
        "    print(\"Noaniq holat:\")\n",
        "    print(\"xT:\", xT)\n",
        "    print(\"yT:\", yT)\n",
        "except Exception as e:\n",
        "    print(\"Noaniq holatda xato:\", str(e))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DgAJK1t71El_",
        "outputId": "267d1f9d-0d27-46e0-ab28-4a049e900dae"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Asosiy holat:\n",
            "xT: 2\n",
            "yT: 16\n",
            "Qiyinchilik darajasi yuqori bo'lgan holat:\n",
            "xT: 8598\n",
            "yT: 310277190\n",
            "Noaniq holat:\n",
            "xT: 0\n",
            "yT: -4\n"
          ]
        }
      ]
    }
  ]
}
